mod$m47 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m48 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
}
# Choose best model using BIC
mod.bic = sapply(mod,function(x)x$BIC)
best_model_name = names(sort(mod.bic)[1])
best_model = eval(parse(text = paste0('mod$',best_model_name)))
date_aux = '2017-07-01'
geodata = list(coords = data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date(date_aux),.(x,y)], data = eval(parse(text = paste0("data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date('",date_aux,"')]$",args[1]))), borders = coords)
class(geodata) = 'geodata'
geodata
grid_length = c(40,40)
# Define grid to interpolate
gr0 = expand.grid(seq(min(geodata$borders[,1]),max(geodata$borders[,1]), len=grid_length[1]),
seq(min(geodata$borders[,2]),max(geodata$borders[,2]), len=grid_length[2]))
gr = locations.inside(gr0, geodata$borders)
variogram = list()
variogram.env = list()
{
variogram$v1 = variog(geodata)
variogram.env$v1 = variog.mc.env(geodata, obj=variogram$v1)
variogram$v2 = variog(geodata, fix.lam=F)
variogram.env$v2 = variog.mc.env(geodata, obj=variogram$v2)
variogram$v3 = variog(geodata, trend="1st")
variogram.env$v3 = variog.mc.env(geodata, obj=variogram$v3)
variogram$v3a = variog(geodata, trend="1st", fix.lam=F)
variogram.env$v3a = variog.mc.env(geodata, obj=variogram$v3a)
variogram$v4 = variog(geodata, trend="2nd")
variogram.env$v4 = variog.mc.env(geodata, obj=variogram$v4)
variogram$v4a = variog(geodata, trend="2nd", fix.lam=F)
variogram.env$v4a = variog.mc.env(geodata, obj=variogram$v4a)
variogram$v5 = variog(geodata,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5 = variog.mc.env(geodata, obj=variogram$v5)
variogram$v5a = variog(geodata,fix.lam = F,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5a = variog.mc.env(geodata, obj=variogram$v5a)
variogram$v5b = variog(geodata,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5b = variog.mc.env(geodata, obj=variogram$v5b)
variogram$v5c = variog(geodata,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5c = variog.mc.env(geodata, obj=variogram$v5c)
variogram$v5d = variog(geodata,fix.lam=F,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5d = variog.mc.env(geodata, obj=variogram$v5d)
variogram$v5e = variog(geodata,fix.lam = F,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5e = variog.mc.env(geodata, obj=variogram$v5e)
}
# Checks for spatial dependency on semi-variogram
dependency = mapply(function(x,y){
any(x$v < y$v.lower | x$v > y$v.upper)
},variogram,variogram.env)
variogram
# Checks for spatial dependency on semi-variogram
dependency = mapply(function(x,y){
any(x$v < y$v.lower | x$v > y$v.upper)
},variogram,variogram.env)
rm(list = 'variogram')
rm(list = 'variogram.env')
# Verify spatial dependency via semi-variograms
variogram = list()
variogram.env = list()
{
variogram$v1 = variog(geodata)
variogram.env$v1 = variog.mc.env(geodata, obj=variogram$v1)
variogram$v2 = variog(geodata, fix.lam=F)
variogram.env$v2 = variog.mc.env(geodata, obj=variogram$v2)
variogram$v3 = variog(geodata, trend="1st")
variogram.env$v3 = variog.mc.env(geodata, obj=variogram$v3)
variogram$v3a = variog(geodata, trend="1st", fix.lam=F)
variogram.env$v3a = variog.mc.env(geodata, obj=variogram$v3a)
variogram$v4 = variog(geodata, trend="2nd")
variogram.env$v4 = variog.mc.env(geodata, obj=variogram$v4)
variogram$v4a = variog(geodata, trend="2nd", fix.lam=F)
variogram.env$v4a = variog.mc.env(geodata, obj=variogram$v4a)
variogram$v5 = variog(geodata,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5 = variog.mc.env(geodata, obj=variogram$v5)
variogram$v5a = variog(geodata,fix.lam = F,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5a = variog.mc.env(geodata, obj=variogram$v5a)
variogram$v5b = variog(geodata,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5b = variog.mc.env(geodata, obj=variogram$v5b)
variogram$v5c = variog(geodata,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5c = variog.mc.env(geodata, obj=variogram$v5c)
variogram$v5d = variog(geodata,fix.lam=F,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5d = variog.mc.env(geodata, obj=variogram$v5d)
variogram$v5e = variog(geodata,fix.lam = F,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5e = variog.mc.env(geodata, obj=variogram$v5e)
}
variogram
date_aux = '2017-07-02'
geodata = list(coords = data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date(date_aux),.(x,y)], data = eval(parse(text = paste0("data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date('",date_aux,"')]$",args[1]))), borders = coords)
class(geodata) = 'geodata'
geodata
grid_length = c(40,40)
gr0 = expand.grid(seq(min(geodata$borders[,1]),max(geodata$borders[,1]), len=grid_length[1]),
seq(min(geodata$borders[,2]),max(geodata$borders[,2]), len=grid_length[2]))
gr = locations.inside(gr0, geodata$borders)
variogram = list()
variogram.env = list()
{
variogram$v1 = variog(geodata)
variogram.env$v1 = variog.mc.env(geodata, obj=variogram$v1)
variogram$v2 = variog(geodata, fix.lam=F)
variogram.env$v2 = variog.mc.env(geodata, obj=variogram$v2)
variogram$v3 = variog(geodata, trend="1st")
variogram.env$v3 = variog.mc.env(geodata, obj=variogram$v3)
variogram$v3a = variog(geodata, trend="1st", fix.lam=F)
variogram.env$v3a = variog.mc.env(geodata, obj=variogram$v3a)
variogram$v4 = variog(geodata, trend="2nd")
variogram.env$v4 = variog.mc.env(geodata, obj=variogram$v4)
variogram$v4a = variog(geodata, trend="2nd", fix.lam=F)
variogram.env$v4a = variog.mc.env(geodata, obj=variogram$v4a)
variogram$v5 = variog(geodata,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5 = variog.mc.env(geodata, obj=variogram$v5)
variogram$v5a = variog(geodata,fix.lam = F,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5a = variog.mc.env(geodata, obj=variogram$v5a)
variogram$v5b = variog(geodata,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5b = variog.mc.env(geodata, obj=variogram$v5b)
variogram$v5c = variog(geodata,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5c = variog.mc.env(geodata, obj=variogram$v5c)
variogram$v5d = variog(geodata,fix.lam=F,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5d = variog.mc.env(geodata, obj=variogram$v5d)
variogram$v5e = variog(geodata,fix.lam = F,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5e = variog.mc.env(geodata, obj=variogram$v5e)
}
date_aux = '2017-07-03'
geodata = list(coords = data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date(date_aux),.(x,y)], data = eval(parse(text = paste0("data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date('",date_aux,"')]$",args[1]))), borders = coords)
class(geodata) = 'geodata'
geodata
# Verify spatial dependency via semi-variograms
variogram = list()
variogram.env = list()
{
variogram$v1 = variog(geodata)
variogram.env$v1 = variog.mc.env(geodata, obj=variogram$v1)
variogram$v2 = variog(geodata, fix.lam=F)
variogram.env$v2 = variog.mc.env(geodata, obj=variogram$v2)
variogram$v3 = variog(geodata, trend="1st")
variogram.env$v3 = variog.mc.env(geodata, obj=variogram$v3)
variogram$v3a = variog(geodata, trend="1st", fix.lam=F)
variogram.env$v3a = variog.mc.env(geodata, obj=variogram$v3a)
variogram$v4 = variog(geodata, trend="2nd")
variogram.env$v4 = variog.mc.env(geodata, obj=variogram$v4)
variogram$v4a = variog(geodata, trend="2nd", fix.lam=F)
variogram.env$v4a = variog.mc.env(geodata, obj=variogram$v4a)
variogram$v5 = variog(geodata,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5 = variog.mc.env(geodata, obj=variogram$v5)
variogram$v5a = variog(geodata,fix.lam = F,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5a = variog.mc.env(geodata, obj=variogram$v5a)
variogram$v5b = variog(geodata,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5b = variog.mc.env(geodata, obj=variogram$v5b)
variogram$v5c = variog(geodata,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5c = variog.mc.env(geodata, obj=variogram$v5c)
variogram$v5d = variog(geodata,fix.lam=F,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5d = variog.mc.env(geodata, obj=variogram$v5d)
variogram$v5e = variog(geodata,fix.lam = F,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5e = variog.mc.env(geodata, obj=variogram$v5e)
}
# Checks for spatial dependency on semi-variogram
dependency = mapply(function(x,y){
any(x$v < y$v.lower | x$v > y$v.upper)
},variogram,variogram.env)
# Choosed semi-variogram to define model initial parameters
if(!any(dependency)){
stop('There are no spatial dependency between sensors.\nHeatmap will not be created')
}else{
semivariogram = eval(parse(text = paste0('variogram$',names(dependency[dependency][1]))))
}
# Define initial parameters
partial_still = seq(min(semivariogram$v),max(semivariogram$v),length.out = 10)
range = seq(min(semivariogram$u),max(semivariogram$u),length.out = 10)
initial = as.data.table(expand.grid(partial_still = partial_still,range = range))
nugget = semivariogram$v[1]
# List of models to test
mod = list()
{
mod$m1 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F)
mod$m2 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st')
mod$m3 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd')
mod$m4 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, cov.model='sph')
mod$m5 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st', cov.model='sph')
mod$m6 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd', cov.model='sph')
mod$m7 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, cov.model='mat')
mod$m8 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=0.5)
mod$m9 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=1.5)
mod$m10 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=2.5)
mod$m11 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=3.5)
mod$m12 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=4)
mod$m13 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st', cov.model='mat')
mod$m14 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=0.5)
mod$m15 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=1.5)
mod$m16 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=2.5)
mod$m17 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=3.5)
mod$m18 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=4)
mod$m19 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd', cov.model='mat')
mod$m20 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=0.5)
mod$m21 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=1.5)
mod$m22 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=2.5)
mod$m23 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m24 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
mod$m25 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F)
mod$m26 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st')
mod$m27 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd')
mod$m28 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, cov.model='sph')
mod$m29 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st', cov.model='sph')
mod$m30 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd', cov.model='sph')
mod$m31 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, cov.model='mat')
mod$m32 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=0.5)
mod$m33 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=1.5)
mod$m34 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=2.5)
mod$m35 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=3.5)
mod$m36 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=4)
mod$m37 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st', cov.model='mat')
mod$m38 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=0.5)
mod$m39 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=1.5)
mod$m40 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=2.5)
mod$m41 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=3.5)
mod$m42 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=4)
mod$m43 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd', cov.model='mat')
mod$m44 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=0.5)
mod$m45 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=1.5)
mod$m46 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=2.5)
mod$m47 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m48 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
}
mod.bic = sapply(mod,function(x)x$BIC)
best_model_name = names(sort(mod.bic)[1])
best_model = eval(parse(text = paste0('mod$',best_model_name)))
kc = krige.conv(geodata, loc=gr0,krige=krige.control(obj.model=best_model),output=output.control(n.predictive=500))
image(kc,col=my.color2(100),xlab = '',ylab='',main='',axes=T,ylim=c(-500,1500))
# Indentify outliers
media = mean(geodata$data)
q1 = quantile(geodata$data,0.25)
q3 = quantile(geodata$data,0.75)
lims = q3 + 1.5*(q3-q1)
limi = q1 - 1.5*(q3-q1)
p = sum(geodata$data< limi | geodata$data> lims)/length(geodata$data)
if(p < 0.2){
# Remove outliers
gdatas = subset(geodata, data < lims)
gdatai = subset(gdatas, data > limi)
geodata = gdatai
}
# Verify spatial dependency via semi-variograms
variogram = list()
variogram.env = list()
{
variogram$v1 = variog(geodata)
variogram.env$v1 = variog.mc.env(geodata, obj=variogram$v1)
variogram$v2 = variog(geodata, fix.lam=F)
variogram.env$v2 = variog.mc.env(geodata, obj=variogram$v2)
variogram$v3 = variog(geodata, trend="1st")
variogram.env$v3 = variog.mc.env(geodata, obj=variogram$v3)
variogram$v3a = variog(geodata, trend="1st", fix.lam=F)
variogram.env$v3a = variog.mc.env(geodata, obj=variogram$v3a)
variogram$v4 = variog(geodata, trend="2nd")
variogram.env$v4 = variog.mc.env(geodata, obj=variogram$v4)
variogram$v4a = variog(geodata, trend="2nd", fix.lam=F)
variogram.env$v4a = variog.mc.env(geodata, obj=variogram$v4a)
variogram$v5 = variog(geodata,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5 = variog.mc.env(geodata, obj=variogram$v5)
variogram$v5a = variog(geodata,fix.lam = F,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5a = variog.mc.env(geodata, obj=variogram$v5a)
variogram$v5b = variog(geodata,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5b = variog.mc.env(geodata, obj=variogram$v5b)
variogram$v5c = variog(geodata,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5c = variog.mc.env(geodata, obj=variogram$v5c)
variogram$v5d = variog(geodata,fix.lam=F,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5d = variog.mc.env(geodata, obj=variogram$v5d)
variogram$v5e = variog(geodata,fix.lam = F,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5e = variog.mc.env(geodata, obj=variogram$v5e)
}
# Checks for spatial dependency on semi-variogram
dependency = mapply(function(x,y){
any(x$v < y$v.lower | x$v > y$v.upper)
},variogram,variogram.env)
# Choosed semi-variogram to define model initial parameters
if(!any(dependency)){
stop('There are no spatial dependency between sensors.\nHeatmap will not be created')
}else{
semivariogram = eval(parse(text = paste0('variogram$',names(dependency[dependency][1]))))
}
partial_still = seq(min(semivariogram$v),max(semivariogram$v),length.out = 10)
range = seq(min(semivariogram$u),max(semivariogram$u),length.out = 10)
initial = as.data.table(expand.grid(partial_still = partial_still,range = range))
nugget = semivariogram$v[1]
# List of models to test
mod = list()
{
mod$m1 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F)
mod$m2 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st')
mod$m3 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd')
mod$m4 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, cov.model='sph')
mod$m5 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st', cov.model='sph')
mod$m6 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd', cov.model='sph')
mod$m7 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, cov.model='mat')
mod$m8 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=0.5)
mod$m9 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=1.5)
mod$m10 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=2.5)
mod$m11 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=3.5)
mod$m12 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=4)
mod$m13 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st', cov.model='mat')
mod$m14 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=0.5)
mod$m15 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=1.5)
mod$m16 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=2.5)
mod$m17 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=3.5)
mod$m18 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=4)
mod$m19 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd', cov.model='mat')
mod$m20 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=0.5)
mod$m21 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=1.5)
mod$m22 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=2.5)
mod$m23 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m24 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
mod$m25 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F)
mod$m26 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st')
mod$m27 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd')
mod$m28 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, cov.model='sph')
mod$m29 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st', cov.model='sph')
mod$m30 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd', cov.model='sph')
mod$m31 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, cov.model='mat')
mod$m32 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=0.5)
mod$m33 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=1.5)
mod$m34 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=2.5)
mod$m35 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=3.5)
mod$m36 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=4)
mod$m37 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st', cov.model='mat')
mod$m38 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=0.5)
mod$m39 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=1.5)
mod$m40 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=2.5)
mod$m41 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=3.5)
mod$m42 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=4)
mod$m43 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd', cov.model='mat')
mod$m44 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=0.5)
mod$m45 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=1.5)
mod$m46 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=2.5)
mod$m47 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m48 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
}
# Choose best model using BIC
mod.bic = sapply(mod,function(x)x$BIC)
best_model_name = names(sort(mod.bic)[1])
best_model = eval(parse(text = paste0('mod$',best_model_name)))
kc = krige.conv(geodata, loc=gr0,krige=krige.control(obj.model=best_model),output=output.control(n.predictive=500))
image(kc,col=my.color2(100),xlab = '',ylab='',main='',axes=T,ylim=c(-500,1500))
date_aux = '2017-07-03'
geodata = list(coords = data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date(date_aux),.(x,y)], data = eval(parse(text = paste0("data.per.sensor[!is.na(x) & !is.na(eval(parse(text = args[1]))) & date2==as.Date('",date_aux,"')]$",args[1]))), borders = coords)
class(geodata) = 'geodata'
grid_length = c(40,40)
# Define grid to interpolate
gr0 = expand.grid(seq(min(geodata$borders[,1]),max(geodata$borders[,1]), len=grid_length[1]),
seq(min(geodata$borders[,2]),max(geodata$borders[,2]), len=grid_length[2]))
# Crop using shape
gr = locations.inside(gr0, geodata$borders)
# Verify spatial dependency via semi-variograms
variogram = list()
variogram.env = list()
{
variogram$v1 = variog(geodata)
variogram.env$v1 = variog.mc.env(geodata, obj=variogram$v1)
variogram$v2 = variog(geodata, fix.lam=F)
variogram.env$v2 = variog.mc.env(geodata, obj=variogram$v2)
variogram$v3 = variog(geodata, trend="1st")
variogram.env$v3 = variog.mc.env(geodata, obj=variogram$v3)
variogram$v3a = variog(geodata, trend="1st", fix.lam=F)
variogram.env$v3a = variog.mc.env(geodata, obj=variogram$v3a)
variogram$v4 = variog(geodata, trend="2nd")
variogram.env$v4 = variog.mc.env(geodata, obj=variogram$v4)
variogram$v4a = variog(geodata, trend="2nd", fix.lam=F)
variogram.env$v4a = variog.mc.env(geodata, obj=variogram$v4a)
variogram$v5 = variog(geodata,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5 = variog.mc.env(geodata, obj=variogram$v5)
variogram$v5a = variog(geodata,fix.lam = F,max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5a = variog.mc.env(geodata, obj=variogram$v5a)
variogram$v5b = variog(geodata,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5b = variog.mc.env(geodata, obj=variogram$v5b)
variogram$v5c = variog(geodata,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5c = variog.mc.env(geodata, obj=variogram$v5c)
variogram$v5d = variog(geodata,fix.lam=F,trend = '1st',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5d = variog.mc.env(geodata, obj=variogram$v5d)
variogram$v5e = variog(geodata,fix.lam = F,trend = '2nd',max.dist=(max(abs(geodata$coords[,1]))-min(abs(geodata$coords[,1])))/2)
variogram.env$v5e = variog.mc.env(geodata, obj=variogram$v5e)
}
# Checks for spatial dependency on semi-variogram
dependency = mapply(function(x,y){
any(x$v < y$v.lower | x$v > y$v.upper)
},variogram,variogram.env)
# Choosed semi-variogram to define model initial parameters
if(!any(dependency)){
stop('There are no spatial dependency between sensors.\nHeatmap will not be created')
}else{
semivariogram = eval(parse(text = paste0('variogram$',names(dependency[dependency][1]))))
}
# Define initial parameters
partial_still = seq(min(semivariogram$v),max(semivariogram$v),length.out = 10)
range = seq(min(semivariogram$u),max(semivariogram$u),length.out = 10)
initial = as.data.table(expand.grid(partial_still = partial_still,range = range))
nugget = semivariogram$v[1]
# List of models to test
mod = list()
{
mod$m1 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F)
mod$m2 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st')
mod$m3 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd')
mod$m4 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, cov.model='sph')
mod$m5 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st', cov.model='sph')
mod$m6 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd', cov.model='sph')
mod$m7 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, cov.model='mat')
mod$m8 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=0.5)
mod$m9 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=1.5)
mod$m10 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=2.5)
mod$m11 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=3.5)
mod$m12 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, cov.model='mat',kappa=4)
mod$m13 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='1st', cov.model='mat')
mod$m14 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=0.5)
mod$m15 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=1.5)
mod$m16 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=2.5)
mod$m17 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=3.5)
mod$m18 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='1st', cov.model='mat',kappa=4)
mod$m19 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=F, trend='2nd', cov.model='mat')
mod$m20 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=0.5)
mod$m21 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=1.5)
mod$m22 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=2.5)
mod$m23 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m24 = likfit(geodata, ini=initial, fix.nug=F, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
mod$m25 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F)
mod$m26 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st')
mod$m27 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd')
mod$m28 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, cov.model='sph')
mod$m29 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st', cov.model='sph')
mod$m30 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd', cov.model='sph')
mod$m31 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, cov.model='mat')
mod$m32 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=0.5)
mod$m33 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=1.5)
mod$m34 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=2.5)
mod$m35 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=3.5)
mod$m36 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, cov.model='mat',kappa=4)
mod$m37 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='1st', cov.model='mat')
mod$m38 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=0.5)
mod$m39 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=1.5)
mod$m40 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=2.5)
mod$m41 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=3.5)
mod$m42 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='1st', cov.model='mat',kappa=4)
mod$m43 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=F, trend='2nd', cov.model='mat')
mod$m44 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=0.5)
mod$m45 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=1.5)
mod$m46 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=2.5)
mod$m47 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=3.5)
mod$m48 = likfit(geodata, ini=initial, fix.nug=T, nugget = nugget, fix.kappa=T, trend='2nd', cov.model='mat',kappa=4)
}
# Choose best model using BIC
mod.bic = sapply(mod,function(x)x$BIC)
best_model_name = names(sort(mod.bic)[1])
best_model = eval(parse(text = paste0('mod$',best_model_name)))
kc = krige.conv(geodata, loc=gr0,krige=krige.control(obj.model=best_model),output=output.control(n.predictive=500))
image(kc,col=my.color2(100),xlab = '',ylab='',main='',axes=T,ylim=c(-500,1500))
load('/home/christopher/Documentos/Sense/Sense-Data-Science/heatmap_general/models_time/model_2017-05-01.RData')
kc = krige.conv(geodata, loc=gr0,krige=krige.control(obj.model=best_model),output=output.control(n.predictive=500))
image(kc,col=my.color2(100),xlab = '',ylab='',main='',axes=T,ylim=c(-500,1500))
# Indentify outliers
media = mean(geodata$data)
q1 = quantile(geodata$data,0.25)
q3 = quantile(geodata$data,0.75)
lims = q3 + 1.5*(q3-q1)
limi = q1 - 1.5*(q3-q1)
p = sum(geodata$data< limi | geodata$data> lims)/length(geodata$data)
if(p < 0.2){
# Remove outliers
gdatas = subset(geodata, data < lims)
gdatai = subset(gdatas, data > limi)
geodata = gdatai
}
kc = krige.conv(geodata, loc=gr0,krige=krige.control(obj.model=best_model),output=output.control(n.predictive=500))
image(kc,col=my.color2(100),xlab = '',ylab='',main='',axes=T,ylim=c(-500,1500))
plot(area13.sp, add = T)
with(label13,text(x, y, de_para, cex = 1,srt=-90,family = 'Roboto'))
with(label13,text(leg.x, leg.y, text, cex = 1,srt=-90,family = 'Roboto',adj=0))
color.legend(xl = 500, xr = 950, yb = -350, yt = -200, gradient =  'x', rect.col = my.color2(100), legend = round(seq(min(kc$predict),max(kc$predict),length.out = 5),2),cex = 1, srt=-90,pos = 3,offset=1.5)
data
client='pernambucanas'
stablishment = 1
#######################################################################################
# APAGAR ESSAS LINHAS DE TESTE PARA NAO FICAR FIXO #
################################################################################################
heatmap_type = 'time'
must_train = T
client = 'pernambucanas'
stablishment = 1
period = 6
date_filter = c(as.Date('2017-07-05'), as.Date('2017-07-11'))
library(RJDBC)
drv = JDBC("org.apache.cassandra.cql.jdbc.CassandraDriver",list.files("/home/christopher/Downloads/apache-cassandra-3.11.0/lib",pattern="jar$",full.names=T))
connection = dbConnect(drv, "jdbc:cassandra://34.196.59.158:9160")
# Sensors coords
macs = as.data.table(dbGetQuery(connection,paste0('SELECT id_sensor, latitude as y , longitude as x, name from ',client,'.sensor where id_campaign = ',stablishment, ' ALLOW FILTERING')))
# Sensors list
macs_seq = unique(macs$id_sensor)
macs_seq
# Get data seq by hour
date_seq = seq(as.POSIXlt(paste0(date_filter[1],' 00:00:00')), as.POSIXlt(paste0(date_filter[2],' 00:00:00')), by='1 hour')
date_seq = data.table(date_ini = date_seq)
date_seq[,date_final := shift(date_ini,1,type='lead')]
date_seq = date_seq[!is.na(date_final)]
date_seq[,`:=`(date_ini = format(date_ini,'%Y-%m-%d %X'), date_final = format(date_final,'%Y-%m-%d %X'))]
# Iteraction date and id_sensors to iterate on mapply
iterator = expand.grid(i = 1:nrow(date_seq), j = macs_seq)
it_i = iterator$i
it_j = iterator$j
aux = mapply(function(i,j) dbGetQuery(connection,paste0('select id_sensor, mac_address, UnixTimestampOf(maxtimeuuid(date_time)) as date_time, cast(rssi as int) as rssi from ', client, ".measurement where id_sensor ='",j, "' ", "and date_time >= '", date_seq[i]$date_ini,"' and date_time < '", date_seq[i]$date_final,"'")),it_i,it_j, SIMPLIFY = F)
base_baixa = fread('/home/christopher/Downloads/SEMANTIX/Base Baixa Provisвria Jud - Brasil.csv',sep='\t',dec = ',')
View(base_baixa)
base_ativo = fread('/home/christopher/Downloads/SEMANTIX/Base Ativo Jud - Brasil.csv',sep='\t',dec = ',')
View(base_ativo)
teste = fread('/home/christopher/Área de Trabalho/baixa_ativo.txt')
teste = fread('/home/christopher/Área de Trabalho/baixa_ativo.txt',sep='|')
teste = read.table('/home/christopher/Área de Trabalho/baixa_ativo.txt',sep='|')
teste
